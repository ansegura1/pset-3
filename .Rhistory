ggplot() + geom_sf(data=ar)
ar <- opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key="boundary", value="administrative") %>%
osmdata_sf()
ar <- ar$osm_multipolygons %>% subset(admin_level==6)
ggplot() + geom_sf(data=ar)
ar <- opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key="boundary", value="administrative") %>%
osmdata_sf()
ar <- ar$osm_multipolygons %>% subset(admin_level==8)
## basic plot
ggplot() + geom_sf(data=ar)
## Parques de Armenia
parques <- opq(bbox = getbb("Armenia ciudad Colombia")) %>%
add_osm_feature(key = "leisure", value = "park") %>%
osmdata_sf() %>% .$osm_polygons %>% select(osm_id,name)
####################################################2. Datos espaciales######################################################
## 2.1  Descargar los datos##
available_features() %>% head(100)
available_tags("amenity") %>% head(20)
opq(bbox = getbb("Armenia Colombia")) # Vamos a obtener la caja de coordenada que contiene el poligono de Armenia##
## Datos de los restaurantes en Armenia
osm = opq(bbox = getbb("Armenia ciudad Colombia")) %>%
add_osm_feature(key="amenity" , value="restaurant") #Para determinar la ubicacion de los datos de los restaurantes en openstreetmap usamos :https://wiki.openstreetmap.org/wiki/Tag:amenity%3Drestaurant)
class(osm)
osm_sf = osm %>% osmdata_sf() ## extraer Simple Features Collection
osm_sf
restaurant = osm_sf$osm_points %>% select(osm_id,amenity)#Obtenemos el objeto
## Parques de Armenia
parques <- opq(bbox = getbb("Armenia ciudad Colombia")) %>%
add_osm_feature(key = "leisure", value = "park") %>%
osmdata_sf() %>% .$osm_polygons %>% select(osm_id,name)
g1<-leaflet() %>% addTiles() %>% addCircles(data=restaurant , col="red")
g1
#parques
g2<-leaflet() %>% addTiles() %>% addPolygons(data=parques, col="blue")
g2
grafica1=ggplot(m1_price)
grafica1
grafica1=ggplot(dt1)
var_names=names(coef(m3_price))
coef_vals=coef(m3_price)
dt3 <- data.frame(Modelo="m3_price",Variables=var_names, RegressionCoefficients=coef_vals)
View(dt3)
View(dt3)
grafica1=ggplot(dt1)
grafica1+geom_point()
grafica1+geom_smooth()
View(dt_resultados)
View(dt_resultados)
m1_price<-lm(price~dist_park+surface_total+luces_2021+rooms+bathrooms, data=data_regresiones)#Regresion 1 por la cual quiero determinar el precio
summary(m1_price)
m11<-summary(m1_price)#Ver resultado de la regresion
View(m11)
m11[["coefficients"]]
View(dt1)
m11<-summary(m1_price)#Ver resultado de la regresion
##################################Angela Segura Cod. 201619956   R version 4.1.3 ############################################
##Taller Pset_3####
###Crear directorio de trabajo##
dir.create("code") #Creamos carpeta llamada code, donde guardaremos el script
dir.create("output") #Creamos la carpeta output para los datos procesados
list.files() ## Revisamos con que carpetas estamos trabajando#
options(install.lock = FALSE)
##El script lo guardamos manualmente en la carpeta de code con el nombre Scriptrespuesta##
###Instalar librerias##
require(pacman)
#install.packages("rlang")#Fue necesario intalar rlang para permitir que el script fucionara
#install.packages('ggspatial')#Paquete necesario para generar flechas del norte en los mapas
#install.packages("tm") #Tm y wordcloud se descargan para crear la nube de palabras
#install.packages("wordcloud")
p_load(tidyverse, rio,skimr,tmaptools, sf, leaflet, rvest, xml2, osmdata, ggsn, tm,wordcloud,dplyr,readr, ggspatial) # Llamamos las librerias  necesarias para el taller##
#########################################1.Regresiones#######################################################
#1.1 Estimaciones#
data_regresiones<-import(file ="input/data_regresiones.rds" ) #Importo la base de datos data_regresiones
summary(data_regresiones)
#Modelo 1
m1_price<-lm(price~dist_park+surface_total+luces_2021+rooms+bathrooms, data=data_regresiones)#Regresion 1 por la cual quiero determinar el precio
summary(m1_price)#Ver resultado de la regresion
#Modelo 2
m2_price<-lm(price~dist_park+surface_total+dist_cbd +rooms+bathrooms, data=data_regresiones)#Regresion 2 por la cual quiero determinar el precio
summary(m2_price)#Ver resultado de la regresion
#Modelo 3
m3_price<-lm(price~dist_park+surface_total +rooms+bathrooms+dist_cole, data=data_regresiones)#Regresion 3 por la cual quiero determinar el precio
summary(m3_price)#Ver resultado de la regresion
#1.2 Presentar resultados#
#Tabla para el modelo 1
var_names=names(coef(m1_price))
coef_vals=coef(m1_price)
dt1 <- data.frame(Modelo="m1_price",Variables=var_names, RegressionCoefficients=coef_vals)
#Tabla para el modelo 2
var_names=names(coef(m2_price))
coef_vals=coef(m1_price)
dt2 <- data.frame(Modelo="m2_price",Variables=var_names, RegressionCoefficients=coef_vals)
#Tabla para el modelo 3
var_names=names(coef(m3_price))
coef_vals=coef(m3_price)
dt3 <- data.frame(Modelo="m3_price",Variables=var_names, RegressionCoefficients=coef_vals)
#Conseguir tablas de los tres modelos
dt_resultados <- rbind(dt1,dt2,dt3)
#Generar grafico
grafica1=ggplot(dt1)
grafica1+geom_smooth()
#Exportar
export(x=dt_resultados, rowNames=FALSE , file="output/resultados_regresiones.xlsx")
## 2.1  Descargar los datos##
available_features() %>% head(100)
available_tags("amenity") %>% head(20)
opq(bbox = getbb("Armeniaciudad Colombia")) # Vamos a obtener la caja de coordenada que contiene el poligono de Armenia##
## Datos de los restaurantes en Armenia
osm = opq(bbox = getbb("Armenia ciudad Colombia")) %>%
add_osm_feature(key="amenity" , value="restaurant") #Para determinar la ubicacion de los datos de los restaurantes en openstreetmap usamos :https://wiki.openstreetmap.org/wiki/Tag:amenity%3Drestaurant)
class(osm)
osm_sf = osm %>% osmdata_sf() ## extraer Simple Features Collection
osm_sf
restaurant = osm_sf$osm_points %>% select(osm_id,amenity)#Obtenemos el objeto
## Parques de Armenia
parques <- opq(bbox = getbb("Armenia ciudad Colombia")) %>%
add_osm_feature(key = "leisure", value = "park") %>%
osmdata_sf() %>% .$osm_polygons %>% select(osm_id,name)
## 2.2 Visualizar  los datos##
#restaurantes
g1<-leaflet() %>% addTiles() %>% addCircles(data=restaurant , col="red")
g1
#parques
g2<-leaflet() %>% addTiles() %>% addPolygons(data=parques, col="blue")
g2
#2.3 Geocodificar direcciones##
#Museo del oro Qumbaya
MOQ <- geocode_OSM("Museo del Oro Quimbaya, Armenia", as.sf=T)
#Pintar el punto del museo del Oro Quimbaya
g3<-leaflet() %>% addTiles() %>% addCircleMarkers(data=MOQ , col="yellow")
g3
#2.4 Exportar mapa##
ar <- opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key="boundary", value="administrative") %>% #cargando las coordenadas de Armenia
osmdata_sf()
ar <- ar$osm_multipolygons %>% subset(admin_level==8)#Buscamos para Colombia a que nivel adminsitrativos estan las ciudades https://wiki.openstreetmap.org/wiki/Tag:boundary%3Dadministrative
ggplot() + geom_sf(data=ar) #Revisamos que Ar
#Mapa
png("output/mapa_amenities.png")
# Para generar la estrella del norte y las escalas utilizamos ggspatial https://mappinggis.com/2019/07/creacion-de-mapas-con-r-y-ggplot2/
map<-get_stepnmap(sac_borders, zoom =10, maptype ="toner-lite")
ggplot(data = ar) +
geom_sf(color='black') +
xlab("Longitud") + ylab("Latitud") +
ggtitle("Mapa de  Armenia") +
geom_sf(data=restaurant, color = 'red')+
geom_sf(data=parques, color = 'blue')+
geom_sf(data=MOQ, color = 'yellow')+
annotation_scale() +
annotation_north_arrow(location='grid')+
theme_bw()
#Mapa
png("output/mapa_amenities.png")
# Para generar la estrella del norte y las escalas utilizamos ggspatial https://mappinggis.com/2019/07/creacion-de-mapas-con-r-y-ggplot2/
map<-get_stepnmap(sac_borders, zoom =10, maptype ="toner-lite")
ggplot(data = ar) +
geom_sf(color='black') +
xlab("Longitud") + ylab("Latitud") +
ggtitle("Mapa de  Armenia") +
geom_sf(data=restaurant, color = 'red')+
geom_sf(data=parques, color = 'blue')+
geom_sf(data=MOQ, color = 'yellow')+
annotation_scale() +
annotation_north_arrow(location='grid')+
theme_bw()
## 2.1  Descargar los datos##
available_features() %>% head(100)
available_tags("amenity") %>% head(20)
opq(bbox = getbb("Armeniaciudad Colombia")) # Vamos a obtener la caja de coordenada que contiene el poligono de Armenia##
## Datos de los restaurantes en Armenia
osm = opq(bbox = getbb("Armenia ciudad Colombia")) %>%
add_osm_feature(key="amenity" , value="restaurant") #Para determinar la ubicacion de los datos de los restaurantes en openstreetmap usamos :https://wiki.openstreetmap.org/wiki/Tag:amenity%3Drestaurant)
class(osm)
osm_sf = osm %>% osmdata_sf() ## extraer Simple Features Collection
osm_sf
restaurant = osm_sf$osm_points %>% select(osm_id,amenity)#Obtenemos el objeto
## Parques de Armenia
parques <- opq(bbox = getbb("Armenia ciudad Colombia")) %>%
add_osm_feature(key = "leisure", value = "park") %>%
osmdata_sf() %>% .$osm_polygons %>% select(osm_id,name)
## 2.2 Visualizar  los datos##
#restaurantes
g1<-leaflet() %>% addTiles() %>% addCircles(data=restaurant , col="red")
g1
#parques
g2<-leaflet() %>% addTiles() %>% addPolygons(data=parques, col="blue")
g2
parques <- opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key = "leisure", value = "park") %>%
osmdata_sf() %>% .$osm_polygons %>% select(osm_id,name)
g1<-leaflet() %>% addTiles() %>% addCircles(data=restaurant , col="red")
g1
#parques
g2<-leaflet() %>% addTiles() %>% addPolygons(data=parques, col="blue")
g2
#Museo del oro Qumbaya
MOQ <- geocode_OSM("Museo del Oro Quimbaya, Armenia", as.sf=T)
#Pintar el punto del museo del Oro Quimbaya
g3<-leaflet() %>% addTiles() %>% addCircleMarkers(data=MOQ , col="yellow")
g3
#2.4 Exportar mapa##
ar <- opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key="boundary", value="administrative") %>% #cargando las coordenadas de Armenia
osmdata_sf()
ar <- ar$osm_multipolygons %>% subset(admin_level==8)#Buscamos para Colombia a que nivel adminsitrativos estan las ciudades https://wiki.openstreetmap.org/wiki/Tag:boundary%3Dadministrative
ggplot() + geom_sf(data=ar) #Revisamos que Armenia quede bien cargado
ggplot() + geom_sf(data=ar)
#Mapa
png("output/mapa_amenities.png")
# Para generar la estrella del norte y las escalas utilizamos ggspatial https://mappinggis.com/2019/07/creacion-de-mapas-con-r-y-ggplot2/
map<-get_stepnmap(sac_borders, zoom =10, maptype ="toner-lite")
ggplot(data = ar) +
geom_sf(color='black') +
xlab("Longitud") + ylab("Latitud") +
ggtitle("Mapa de  Armenia") +
geom_sf(data=restaurant, color = 'red')+
geom_sf(data=parques, color = 'blue')+
geom_sf(data=MOQ, color = 'yellow')+
annotation_scale() +
annotation_north_arrow(location='grid')+
theme_bw()
ggplot() + geom_sf(data=ar)
png("output/mapa_amenities.png")
map<-get_stepnmap(sac_borders, zoom =10, maptype ="toner-lite")
ggplot(data = ar) +
geom_sf(color='black') +
xlab("Longitud") + ylab("Latitud") +
ggtitle("Mapa de  Armenia") +
geom_sf(data=restaurant, color = 'red')+
geom_sf(data=parques, color = 'blue')+
geom_sf(data=MOQ, color = 'yellow')+
annotation_scale() +
annotation_north_arrow(location='grid')+
theme_bw()
ggplot(data = ar) +
geom_sf(color='black') +
xlab("Longitud") + ylab("Latitud") +
ggtitle("Mapa de  Armenia") +
geom_sf(data=restaurant, color = 'red')+
geom_sf(data=parques, color = 'blue')+
geom_sf(data=MOQ, color = 'yellow')+
annotation_scale() +
annotation_north_arrow(location='grid')+
theme_bw()
##################################Angela Segura Cod. 201619956   R version 4.1.3 ############################################
##Taller Pset_3####
###Crear directorio de trabajo##
dir.create("code") #Creamos carpeta llamada code, donde guardaremos el script
dir.create("output") #Creamos la carpeta output para los datos procesados
list.files() ## Revisamos con que carpetas estamos trabajando#
options(install.lock = FALSE)
##El script lo guardamos manualmente en la carpeta de code con el nombre Scriptrespuesta##
###Instalar librerias##
require(pacman)
#install.packages("rlang")#Fue necesario intalar rlang para permitir que el script fucionara
#install.packages('ggspatial')#Paquete necesario para generar flechas del norte en los mapas
#install.packages("tm") #Tm y wordcloud se descargan para crear la nube de palabras
#install.packages("wordcloud")
p_load(tidyverse, rio,skimr,tmaptools, sf, leaflet, rvest, xml2, osmdata, ggsn, tm,wordcloud,dplyr,readr, ggspatial) # Llamamos las librerias  necesarias para el taller##
#########################################1.Regresiones#######################################################
#1.1 Estimaciones#
data_regresiones<-import(file ="input/data_regresiones.rds" ) #Importo la base de datos data_regresiones
summary(data_regresiones)
#Modelo 1
m1_price<-lm(price~dist_park+surface_total+luces_2021+rooms+bathrooms, data=data_regresiones)#Regresion 1 por la cual quiero determinar el precio
summary(m1_price)#Ver resultado de la regresion
#Modelo 2
m2_price<-lm(price~dist_park+surface_total+dist_cbd +rooms+bathrooms, data=data_regresiones)#Regresion 2 por la cual quiero determinar el precio
summary(m2_price)#Ver resultado de la regresion
#Modelo 3
m3_price<-lm(price~dist_park+surface_total +rooms+bathrooms+dist_cole, data=data_regresiones)#Regresion 3 por la cual quiero determinar el precio
summary(m3_price)#Ver resultado de la regresion
#1.2 Presentar resultados#
#Tabla para el modelo 1
var_names=names(coef(m1_price))
coef_vals=coef(m1_price)
dt1 <- data.frame(Modelo="m1_price",Variables=var_names, RegressionCoefficients=coef_vals)
#Tabla para el modelo 2
var_names=names(coef(m2_price))
coef_vals=coef(m1_price)
dt2 <- data.frame(Modelo="m2_price",Variables=var_names, RegressionCoefficients=coef_vals)
#Tabla para el modelo 3
var_names=names(coef(m3_price))
coef_vals=coef(m3_price)
dt3 <- data.frame(Modelo="m3_price",Variables=var_names, RegressionCoefficients=coef_vals)
#Conseguir tablas de los tres modelos
dt_resultados <- rbind(dt1,dt2,dt3)
#Generar grafico
#Exportar
export(x=dt_resultados, rowNames=FALSE , file="output/resultados_regresiones.xlsx")
####################################################2. Datos espaciales######################################################
## 2.1  Descargar los datos##
available_features() %>% head(100)
available_tags("amenity") %>% head(20)
opq(bbox = getbb("Armeniaciudad Colombia")) # Vamos a obtener la caja de coordenada que contiene el poligono de Armenia##
## Datos de los restaurantes en Armenia
osm = opq(bbox = getbb("Armenia ciudad Colombia")) %>%
add_osm_feature(key="amenity" , value="restaurant") #Para determinar la ubicacion de los datos de los restaurantes en openstreetmap usamos :https://wiki.openstreetmap.org/wiki/Tag:amenity%3Drestaurant)
class(osm)
osm_sf = osm %>% osmdata_sf() ## extraer Simple Features Collection
osm_sf
restaurant = osm_sf$osm_points %>% select(osm_id,amenity)#Obtenemos el objeto
## Parques de Armenia
parques <- opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key = "leisure", value = "park") %>%
osmdata_sf() %>% .$osm_polygons %>% select(osm_id,name)
## 2.2 Visualizar  los datos##
#restaurantes
g1<-leaflet() %>% addTiles() %>% addCircles(data=restaurant , col="red")
g1
#parques
g2<-leaflet() %>% addTiles() %>% addPolygons(data=parques, col="blue")
g2
#2.3 Geocodificar direcciones##
#Museo del oro Qumbaya
MOQ <- geocode_OSM("Museo del Oro Quimbaya, Armenia", as.sf=T)
#Pintar el punto del museo del Oro Quimbaya
g3<-leaflet() %>% addTiles() %>% addCircleMarkers(data=MOQ , col="yellow")
g3
#2.4 Exportar mapa##
ar <- opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key="boundary", value="administrative") %>% #cargando las coordenadas de Armenia
osmdata_sf()
ar <- ar$osm_multipolygons %>% subset(admin_level==8)#Buscamos para Colombia a que nivel adminsitrativos estan las ciudades https://wiki.openstreetmap.org/wiki/Tag:boundary%3Dadministrative
ggplot() + geom_sf(data=ar) #Revisamos que Armenia quede bien cargado
#Mapa
png("output/mapa_amenities.png")
# Para generar la estrella del norte y las escalas utilizamos ggspatial https://mappinggis.com/2019/07/creacion-de-mapas-con-r-y-ggplot2/
ggplot(data = ar) +
geom_sf(color='black') +
xlab("Longitud") + ylab("Latitud") +
ggtitle("Mapa de  Armenia") +
geom_sf(data=restaurant, color = 'red')+
geom_sf(data=parques, color = 'blue')+
geom_sf(data=MOQ, color = 'yellow')+
annotation_scale() +
annotation_north_arrow(location='grid')+
theme_bw()
###################################3. Web-scraping y procesamiento de texto#####################################################
browseURL("https://es.wikipedia.org/wiki/Departamentos_de_Colombia") #Para el punto 3 vamos a usar la pagina de departamentos de Colombia
##3.1 Crear objeto html##
my_url = "https://es.wikipedia.org/wiki/Departamentos_de_Colombia" #Guardo la url de la pagina
browseURL(my_url)
my_html = read_html(my_url)#Guardo la Html
class(my_html) ## verificar que queda guardada   como un objeto xml_document#
##3.2  extraer el titulo de la pagina##
my_html %>% html_nodes(xpath = '//*[@id="firstHeading"]/span') %>% #En la pag le damos inspeccionar al elemento y posteriormente le damos copiar Xpath
html_text() #Visualizamos el elemento extraido
#3.3 Extraer la tabla que contiene los departamentos de Colombia y exportar
my_table = my_html %>% html_table() #Descargo todas las tablas de la pagina
View(my_table) #Observo cuantas filas y columnas tienen las tablas descargadas para encontrar la de departamentos
View(my_table[[4]]) #Verificamos que la tabla 5 corresponde a la tabla de departamentos
departamentos= my_table[[4]]
export(x=departamentos , file="output/tabla_departamento.xlsx")
#3.4 Extraer los parrafos del documento (elementos con etiqueta p) y generar nube de palabras##
Parrafos<- my_html %>% html_elements("p") %>% html_text() ### Ver los textos que estan con la etiqueta p
Parrafos
as.character(Parrafos)
#Para generar la nube de palabras utilizaremos como guia https://towardsdatascience.com/create-a-word-cloud-with-r-bde3e7422e8a
docs <- Corpus(VectorSource(Parrafos))
docs <- docs %>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(stripWhitespace)
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeWords, stopwords("spanish"))
dtm <- TermDocumentMatrix(docs)
matrix <- as.matrix(dtm)
words <- sort(rowSums(matrix),decreasing=TRUE)
df <- data.frame(word = names(words),freq=words)
set.seed(1234) # for reproducibility
png("./output/nube_palabras.png")
wordcloud(words = df$word, freq = df$freq, min.freq = 1,           max.words=200, random.order=FALSE, rot.per=0.35,            colors=brewer.pal(8, "Dark2"))
ar <- opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key="boundary", value="administrative") %>% #cargando las coordenadas de Armenia
osmdata_sf()
##Taller Pset_3####
###Crear directorio de trabajo##
dir.create("code") #Creamos carpeta llamada code, donde guardaremos el script
dir.create("output") #Creamos la carpeta output para los datos procesados
list.files() ## Revisamos con que carpetas estamos trabajando#
options(install.lock = FALSE)
##El script lo guardamos manualmente en la carpeta de code con el nombre Scriptrespuesta##
###Instalar librerias##
require(pacman)
#install.packages("rlang")#Fue necesario intalar rlang para permitir que el script fucionara
#install.packages('ggspatial')#Paquete necesario para generar flechas del norte en los mapas
#install.packages("tm") #Tm y wordcloud se descargan para crear la nube de palabras
#install.packages("wordcloud")
p_load(tidyverse, rio,skimr,tmaptools, sf, leaflet, rvest, xml2, osmdata, ggsn, tm,wordcloud,dplyr,readr, ggspatial) # Llamamos las librerias  necesarias para el taller##
ar <- opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key="boundary", value="administrative") %>% #cargando las coordenadas de Armenia
osmdata_sf()
ar <- ar$osm_multipolygons %>% subset(admin_level==8)#Buscamos para Colombia a que nivel adminsitrativos estan las ciudades https://wiki.openstreetmap.org/wiki/Tag:boundary%3Dadministrative
ar
ggplot() + geom_sf(data=ar)
ggplot() + geom_sf(data=ar) #Revisamos que Armenia quede bien cargado
#Mapa
png("output/mapa_amenities.png")
# Para generar la estrella del norte y las escalas utilizamos ggspatial https://mappinggis.com/2019/07/creacion-de-mapas-con-r-y-ggplot2/
ggplot(data = ar) +
geom_sf(color='black') +
xlab("Longitud") + ylab("Latitud") +
ggtitle("Mapa de  Armenia") +
geom_sf(data=restaurant, color = 'red')+
geom_sf(data=parques, color = 'blue')+
geom_sf(data=MOQ, color = 'yellow')+
annotation_scale() +
annotation_north_arrow(location='grid')+
theme_bw()
ggplot(data = ar) +
geom_sf(color='black') +
xlab("Longitud") + ylab("Latitud") +
ggtitle("Mapa de  Armenia") +
geom_sf(data=restaurant, color = 'red')+
geom_sf(data=parques, color = 'blue')+
geom_sf(data=MOQ, color = 'yellow')+
annotation_scale() +
annotation_north_arrow(location='grid')+
theme_bw()
ggplot(data = ar) +
geom_sf(color='black') +
xlab("Longitud") + ylab("Latitud") +
ggtitle("Mapa de  Armenia: Parques,restaurantes y museo quimbaya") +
geom_sf(data=restaurant, color = 'red')+
geom_sf(data=parques, color = 'blue')+
geom_sf(data=MOQ, color = 'yellow')+
annotation_scale() +
annotation_north_arrow(location='grid')+
theme_bw()
#Mapa
png("output/mapa_amenities.png")
# Para generar la estrella del norte y las escalas utilizamos ggspatial https://mappinggis.com/2019/07/creacion-de-mapas-con-r-y-ggplot2/
ggplot(data = ar) +
geom_sf(color='black') +
xlab("Longitud") + ylab("Latitud") +
ggtitle("Mapa de  Armenia: Parques,restaurantes y museo quimbaya") +
geom_sf(data=restaurant, color = 'red')+
geom_sf(data=parques, color = 'blue')+
geom_sf(data=MOQ, color = 'yellow')+
annotation_scale() +
annotation_north_arrow(location='grid')+
theme_bw()
g2
g1
## Datos de los restaurantes en Armenia
osm = opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key="amenity" , value="restaurant") #Para determinar la ubicacion de los datos de los restaurantes en openstreetmap usamos :https://wiki.openstreetmap.org/wiki/Tag:amenity%3Drestaurant)
class(osm)
osm_sf = osm %>% osmdata_sf() ## extraer Simple Features Collection
osm_sf
restaurant = osm_sf$osm_points %>% select(osm_id,amenity)#Obtenemos el objeto
###Instalar librerias##
require(pacman)
#install.packages("rlang")#Fue necesario intalar rlang para permitir que el script fucionara
#install.packages('ggspatial')#Paquete necesario para generar flechas del norte en los mapas
#install.packages("tm") #Tm y wordcloud se descargan para crear la nube de palabras
#install.packages("wordcloud")
p_load(tidyverse, rio,skimr,tmaptools, sf, leaflet, rvest, xml2, osmdata, ggsn, tm,wordcloud,dplyr,readr, ggspatial) # Llamamos las librerias  necesarias para el taller##
osm = opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key="amenity" , value="restaurant") #Para determinar la ubicacion de los datos de los restaurantes en openstreetmap usamos :https://wiki.openstreetmap.org/wiki/Tag:amenity%3Drestaurant)
class(osm)
osm_sf = osm %>% osmdata_sf() ## extraer Simple Features Collection
osm_sf
restaurant = osm_sf$osm_points %>% select(osm_id,amenity)#Obtenemos el objeto
## Parques de Armenia
parques <- opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key = "leisure", value = "park") %>%
osmdata_sf() %>% .$osm_polygons %>% select(osm_id,name)
g1<-leaflet() %>% addTiles() %>% addCircles(data=restaurant , col="red")
g1
g1<-leaflet() %>% addTiles() %>% addCircles(data=restaurant , col="red")
g1
g2<-leaflet() %>% addTiles() %>% addPolygons(data=parques, col="blue")
g2
#Museo del oro Qumbaya
MOQ <- geocode_OSM("Museo del Oro Quimbaya, Armenia", as.sf=T)
#Pintar el punto del museo del Oro Quimbaya
g3<-leaflet() %>% addTiles() %>% addCircleMarkers(data=MOQ , col="yellow")
g3
#2.4 Exportar mapa##
ar <- opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key="boundary", value="administrative") %>% #cargando las coordenadas de Armenia
osmdata_sf()
ar <- ar$osm_multipolygons %>% subset(admin_level==8)#Buscamos para Colombia a que nivel adminsitrativos estan las ciudades https://wiki.openstreetmap.org/wiki/Tag:boundary%3Dadministrative
ggplot() + geom_sf(data=ar) #Revisamos que Armenia quede bien cargado
#Mapa
png("output/mapa_amenities.png")
# Para generar la estrella del norte y las escalas utilizamos ggspatial https://mappinggis.com/2019/07/creacion-de-mapas-con-r-y-ggplot2/
ggplot(data = ar) +
geom_sf(color='black') +
xlab("Longitud") + ylab("Latitud") +
ggtitle("Mapa de  Armenia: Parques,restaurantes y museo quimbaya") +
geom_sf(data=restaurant, color = 'red')+
geom_sf(data=parques, color = 'blue')+
geom_sf(data=MOQ, color = 'yellow')+
annotation_scale() +
annotation_north_arrow(location='grid')+
theme_bw()
png("output/mapa_amenities.png")
ggplot(data = ar) +
geom_sf(color='black') +
xlab("Longitud") + ylab("Latitud") +
ggtitle("Mapa de  Armenia: Parques,restaurantes y museo quimbaya") +
geom_sf(data=restaurant, color = 'red')+
geom_sf(data=parques, color = 'blue')+
geom_sf(data=MOQ, color = 'yellow')+
annotation_scale() +
annotation_north_arrow(location='grid')+
theme_bw()
