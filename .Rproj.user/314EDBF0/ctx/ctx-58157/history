png("output/nube_palabras.png")
##################################Angela Segura Cod. 201619956   R version 4.1.3 ############################################
##Taller Pset_3####
###Crear directorio de trabajo##
dir.create("code") #Creamos carpeta llamada code, donde guardaremos el script
dir.create("output") #Creamos la carpeta output para los datos procesados
list.files() ## Revisamos con que carpetas estamos trabajando#
##El script lo guardamos manualmente en la carpeta de code con el nombre Scriptrespuesta##
###Instalar librerias##
require(pacman)
install.packages("tm") #Tm y wordcloud se descargan para crear la nube de palabras
install.packages("wordcloud")
p_load(tidyverse, rio,skimr,tmaptools, sf, leaflet, rvest, xml2, osmdata, ggsn, tm,wordcloud,dplyr) # Llamamos las librerias  necesarias para el taller##
#########################################1.Regresiones#######################################################
####################################################2. Datos espaciales######################################################
## 2.1  Descargar los datos##
available_features() %>% head(100)
available_tags("amenity") %>% head(20)
opq(bbox = getbb("Armenia Colombia")) # Vamos a obtener la caja de coordenada que contiene el polÃ­gono de Armenia##
## Datos de los restaurantes en Armenia
osm = opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key="amenity" , value="restaurant") #En internet encontramos cÃ³mo encontrar los datos de los restaurantes en openstreetmap. (https://wiki.openstreetmap.org/wiki/Tag:amenity%3Drestaurant)
class(osm)
osm_sf = osm %>% osmdata_sf() ## extraer Simple Features Collection
osm_sf
restaurant = osm_sf$osm_points %>% select(osm_id,amenity)#Obtenemos el objeto
## Parques de Armenia
parques <- opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key = "leisure", value = "park") %>%
osmdata_sf() %>% .$osm_polygons %>% select(osm_id,name)
## 2.2 Visualizar  los datos##
#restaurantes
leaflet() %>% addTiles() %>% addCircles(data=restaurant , col="red")
#parques
leaflet() %>% addTiles() %>% addPolygons(data=parques, col="blue")
#2.3 Geocodificar direcciones##
#Museo del oro Qumbaya
MOQ <- geocode_OSM("Museo del Oro Quimbaya, Armenia", as.sf=T)
#Pintar el punto del museo del Oro Quimbaya
leaflet() %>% addTiles() %>% addCircleMarkers(data=MOQ , col="yellow")
#2.4 Exportar mapa##
###################################3. Web-scraping y procesamiento de texto#####################################################
browseURL("https://es.wikipedia.org/wiki/Departamentos_de_Colombia") #Para el punto 3 vamos a usar la pagina de departamentos de Colombia
##3.1 Crear objeto html##
my_url = "https://es.wikipedia.org/wiki/Departamentos_de_Colombia" #Guardo la url de la pagina
browseURL(my_url)
my_html = read_html(my_url)#Guardo la Html
class(my_html) ## verificar que queda guardada   como un objeto xml_document#
##3.2  extraer el titulo de la pagina##
my_html %>% html_nodes(xpath = '//*[@id="firstHeading"]/span') %>% #En la pag le damos inspeccionar al elemento y posteriormente le damos copiar Xpath
html_text() #Visualizamos el elemento extraido
#3.3 Extraer la tabla que contiene los departamentos de Colombia y exportar
my_table = my_html %>% html_table() #Descargo todas las tablas de la pagina
View(my_table) #Observo cuantas filas y columnas tienen las tablas descargadas para encontrar la de departamentos
View(my_table[[4]]) #Verificamos que la tabla 5 corresponde a la tabla de departamentos
departamentos= my_table[[4]]
export(x=departamentos , file="output/tabla_departamento.xlsx")
#3.4 Extraer los parrafos del documento (elementos con etiqueta p) y generar nube de palabras##
Parrafos<- my_html %>% html_elements("p") %>% html_text() ### Ver los textos que estan con la etiqueta p
Parrafos
as.character(Parrafos)
docs <- Corpus(VectorSource(Parrafos))
docs <- docs %>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(stripWhitespace)
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeWords, stopwords("spanish"))
dtm <- TermDocumentMatrix(docs)
matrix <- as.matrix(dtm)
words <- sort(rowSums(matrix),decreasing=TRUE)
df <- data.frame(word = names(words),freq=words)
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 2, max.words=50, scale=c(2, .5), random.order=FALSE, rot.per=0.15,colors=brewer.pal(8, "Dark2") )
pdf("output/nube_palabras.pdf")
png("output/nube_palabras.png")
##################################Angela Segura Cod. 201619956   R version 4.1.3 ############################################
##Taller Pset_3####
###Crear directorio de trabajo##
dir.create("code") #Creamos carpeta llamada code, donde guardaremos el script
dir.create("output") #Creamos la carpeta output para los datos procesados
list.files() ## Revisamos con que carpetas estamos trabajando#
##El script lo guardamos manualmente en la carpeta de code con el nombre Scriptrespuesta##
###Instalar librerias##
require(pacman)
install.packages("tm") #Tm y wordcloud se descargan para crear la nube de palabras
install.packages("wordcloud")
p_load(tidyverse, rio,skimr,tmaptools, sf, leaflet, rvest, xml2, osmdata, ggsn, tm,wordcloud,dplyr) # Llamamos las librerias  necesarias para el taller##
#########################################1.Regresiones#######################################################
####################################################2. Datos espaciales######################################################
## 2.1  Descargar los datos##
available_features() %>% head(100)
available_tags("amenity") %>% head(20)
opq(bbox = getbb("Armenia Colombia")) # Vamos a obtener la caja de coordenada que contiene el polÃ­gono de Armenia##
## Datos de los restaurantes en Armenia
osm = opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key="amenity" , value="restaurant") #En internet encontramos cÃ³mo encontrar los datos de los restaurantes en openstreetmap. (https://wiki.openstreetmap.org/wiki/Tag:amenity%3Drestaurant)
class(osm)
osm_sf = osm %>% osmdata_sf() ## extraer Simple Features Collection
##################################Angela Segura Cod. 201619956   R version 4.1.3 ############################################
##Taller Pset_3####
###Crear directorio de trabajo##
dir.create("code") #Creamos carpeta llamada code, donde guardaremos el script
dir.create("output") #Creamos la carpeta output para los datos procesados
list.files() ## Revisamos con que carpetas estamos trabajando#
##El script lo guardamos manualmente en la carpeta de code con el nombre Scriptrespuesta##
###Instalar librerias##
require(pacman)
install.packages("tm") #Tm y wordcloud se descargan para crear la nube de palabras
install.packages("wordcloud")
p_load(tidyverse, rio,skimr,tmaptools, sf, leaflet, rvest, xml2, osmdata, ggsn, tm,wordcloud,dplyr) # Llamamos las librerias  necesarias para el taller##
#########################################1.Regresiones#######################################################
####################################################2. Datos espaciales######################################################
## 2.1  Descargar los datos##
available_features() %>% head(100)
available_tags("amenity") %>% head(20)
opq(bbox = getbb("Armenia Colombia")) # Vamos a obtener la caja de coordenada que contiene el polÃ­gono de Armenia##
## Datos de los restaurantes en Armenia
osm = opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key="amenity" , value="restaurant") #En internet encontramos cÃ³mo encontrar los datos de los restaurantes en openstreetmap. (https://wiki.openstreetmap.org/wiki/Tag:amenity%3Drestaurant)
class(osm)
osm_sf = osm %>% osmdata_sf() ## extraer Simple Features Collection
osm_sf
restaurant = osm_sf$osm_points %>% select(osm_id,amenity)#Obtenemos el objeto
## Parques de Armenia
parques <- opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key = "leisure", value = "park") %>%
osmdata_sf() %>% .$osm_polygons %>% select(osm_id,name)
## 2.2 Visualizar  los datos##
#restaurantes
leaflet() %>% addTiles() %>% addCircles(data=restaurant , col="red")
#parques
leaflet() %>% addTiles() %>% addPolygons(data=parques, col="blue")
#2.3 Geocodificar direcciones##
#Museo del oro Qumbaya
MOQ <- geocode_OSM("Museo del Oro Quimbaya, Armenia", as.sf=T)
#Pintar el punto del museo del Oro Quimbaya
leaflet() %>% addTiles() %>% addCircleMarkers(data=MOQ , col="yellow")
#2.4 Exportar mapa##
###################################3. Web-scraping y procesamiento de texto#####################################################
browseURL("https://es.wikipedia.org/wiki/Departamentos_de_Colombia") #Para el punto 3 vamos a usar la pagina de departamentos de Colombia
##3.1 Crear objeto html##
my_url = "https://es.wikipedia.org/wiki/Departamentos_de_Colombia" #Guardo la url de la pagina
browseURL(my_url)
my_html = read_html(my_url)#Guardo la Html
class(my_html) ## verificar que queda guardada   como un objeto xml_document#
##3.2  extraer el titulo de la pagina##
my_html %>% html_nodes(xpath = '//*[@id="firstHeading"]/span') %>% #En la pag le damos inspeccionar al elemento y posteriormente le damos copiar Xpath
html_text() #Visualizamos el elemento extraido
#3.3 Extraer la tabla que contiene los departamentos de Colombia y exportar
my_table = my_html %>% html_table() #Descargo todas las tablas de la pagina
View(my_table) #Observo cuantas filas y columnas tienen las tablas descargadas para encontrar la de departamentos
View(my_table[[4]]) #Verificamos que la tabla 5 corresponde a la tabla de departamentos
departamentos= my_table[[4]]
export(x=departamentos , file="output/tabla_departamento.xlsx")
#3.4 Extraer los parrafos del documento (elementos con etiqueta p) y generar nube de palabras##
Parrafos<- my_html %>% html_elements("p") %>% html_text() ### Ver los textos que estan con la etiqueta p
Parrafos
as.character(Parrafos)
docs <- Corpus(VectorSource(Parrafos))
docs <- docs %>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(stripWhitespace)
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeWords, stopwords("spanish"))
dtm <- TermDocumentMatrix(docs)
matrix <- as.matrix(dtm)
words <- sort(rowSums(matrix),decreasing=TRUE)
df <- data.frame(word = names(words),freq=words)
set.seed(1234) # for reproducibility
wordcloud(words = df$word, freq = df$freq, min.freq = 2, max.words=50, scale=c(2, .5), random.order=FALSE, rot.per=0.15,colors=brewer.pal(8, "Dark2") )
pdf("./output/nube_palabras.pdf")
png("./output/nube_palabras.png")
##################################Angela Segura Cod. 201619956   R version 4.1.3 ############################################
##Taller Pset_3####
###Crear directorio de trabajo##
dir.create("code") #Creamos carpeta llamada code, donde guardaremos el script
dir.create("output") #Creamos la carpeta output para los datos procesados
list.files() ## Revisamos con que carpetas estamos trabajando#
##El script lo guardamos manualmente en la carpeta de code con el nombre Scriptrespuesta##
###Instalar librerias##
require(pacman)
install.packages("tm") #Tm y wordcloud se descargan para crear la nube de palabras
install.packages("wordcloud")
p_load(tidyverse, rio,skimr,tmaptools, sf, leaflet, rvest, xml2, osmdata, ggsn, tm,wordcloud,dplyr) # Llamamos las li
#########################################1.Regresiones#######################################################
####################################################2. Datos espaciales######################################################
## 2.1  Descargar los datos##
available_features() %>% head(100)
available_tags("amenity") %>% head(20)
opq(bbox = getbb("Armenia Colombia")) # Vamos a obtener la caja de coordenada que contiene el polÃ­gono de Armenia##
## Datos de los restaurantes en Armenia
osm = opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key="amenity" , value="restaurant") #En internet encontramos cÃ³mo encontrar los datos de los restaurantes en openstreetmap. (https://wiki.openstreetmap.org/wiki/Tag:amenity%3Drestaurant)
class(osm)
osm_sf = osm %>% osmdata_sf() ## extraer Simple Features Collection
osm_sf
restaurant = osm_sf$osm_points %>% select(osm_id,amenity)#Obtenemos el objeto
## Parques de Armenia
parques <- opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key = "leisure", value = "park") %>%
osmdata_sf() %>% .$osm_polygons %>% select(osm_id,name)
## 2.2 Visualizar  los datos##
#restaurantes
leaflet() %>% addTiles() %>% addCircles(data=restaurant , col="red")
#parques
leaflet() %>% addTiles() %>% addPolygons(data=parques, col="blue")
#2.3 Geocodificar direcciones##
#Museo del oro Qumbaya
MOQ <- geocode_OSM("Museo del Oro Quimbaya, Armenia", as.sf=T)
#Pintar el punto del museo del Oro Quimbaya
leaflet() %>% addTiles() %>% addCircleMarkers(data=MOQ , col="yellow")
#2.4 Exportar mapa##
###################################3. Web-scraping y procesamiento de texto#####################################################
browseURL("https://es.wikipedia.org/wiki/Departamentos_de_Colombia") #Para el punto 3 vamos a usar la pagina de departamentos de Colombia
##3.1 Crear objeto html##
my_url = "https://es.wikipedia.org/wiki/Departamentos_de_Colombia" #Guardo la url de la pagina
browseURL(my_url)
my_html = read_html(my_url)#Guardo la Html
class(my_html) ## verificar que queda guardada   como un objeto xml_document#
##3.2  extraer el titulo de la pagina##
my_html %>% html_nodes(xpath = '//*[@id="firstHeading"]/span') %>% #En la pag le damos inspeccionar al elemento y posteriormente le damos copiar Xpath
html_text() #Visualizamos el elemento extraido
#3.3 Extraer la tabla que contiene los departamentos de Colombia y exportar
my_table = my_html %>% html_table() #Descargo todas las tablas de la pagina
View(my_table) #Observo cuantas filas y columnas tienen las tablas descargadas para encontrar la de departamentos
View(my_table[[4]]) #Verificamos que la tabla 5 corresponde a la tabla de departamentos
departamentos= my_table[[4]]
png("./mapa.restaurantes.png")
leaflet() %>% addTiles() %>% addCircles(data=restaurant , col="red")
leaflet() %>% addTiles() %>% addCircles(data=restaurant , col="red")
##################################Angela Segura Cod. 201619956   R version 4.1.3 ############################################
##Taller Pset_3####
###Crear directorio de trabajo##
dir.create("code") #Creamos carpeta llamada code, donde guardaremos el script
dir.create("output") #Creamos la carpeta output para los datos procesados
list.files() ## Revisamos con que carpetas estamos trabajando#
##El script lo guardamos manualmente en la carpeta de code con el nombre Scriptrespuesta##
###Instalar librerias##
require(pacman)
install.packages("tm") #Tm y wordcloud se descargan para crear la nube de palabras
install.packages("wordcloud")
p_load(tidyverse, rio,skimr,tmaptools, sf, leaflet, rvest, xml2, osmdata, ggsn, tm,wordcloud,dplyr) # Llamamos las librerias  necesarias para el taller##
#########################################1.Regresiones#######################################################
####################################################2. Datos espaciales######################################################
## 2.1  Descargar los datos##
available_features() %>% head(100)
available_tags("amenity") %>% head(20)
opq(bbox = getbb("Armenia Colombia")) # Vamos a obtener la caja de coordenada que contiene el polÃ­gono de Armenia##
## Datos de los restaurantes en Armenia
osm = opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key="amenity" , value="restaurant") #En internet encontramos cÃ³mo encontrar los datos de los restaurantes en openstreetmap. (https://wiki.openstreetmap.org/wiki/Tag:amenity%3Drestaurant)
class(osm)
osm_sf = osm %>% osmdata_sf() ## extraer Simple Features Collection
osm_sf
restaurant = osm_sf$osm_points %>% select(osm_id,amenity)#Obtenemos el objeto
## Parques de Armenia
parques <- opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key = "leisure", value = "park") %>%
osmdata_sf() %>% .$osm_polygons %>% select(osm_id,name)
## 2.2 Visualizar  los datos##
#restaurantes
leaflet() %>% addTiles() %>% addCircles(data=restaurant , col="red")
#parques
leaflet() %>% addTiles() %>% addPolygons(data=parques, col="blue")
#2.3 Geocodificar direcciones##
#Museo del oro Qumbaya
MOQ <- geocode_OSM("Museo del Oro Quimbaya, Armenia", as.sf=T)
#Pintar el punto del museo del Oro Quimbaya
leaflet() %>% addTiles() %>% addCircleMarkers(data=MOQ , col="yellow")
#2.4 Exportar mapa##
png("./mapa.restaurantes.png")
leaflet() %>% addTiles() %>% addCircles(data=restaurant , col="red")
png("mapa.restaurantes.png")
leaflet() %>% addTiles() %>% addCircles(data=restaurant , col="red")
png("mapa_estaurantes.png")
leaflet() %>% addTiles() %>% addCircles(data=restaurant , col="red")
ggplot2(data=parques)+grom_sf()
library(ggplot2)
ggplot2(data=parques)+grom_sf()
library(ggmap)
library(ggraph)
library(ggrepel)
library(ggsn)
library(tidytext)
library(ggforce)
ggplot2(data=parques)+grom_sf()
peninbal_shp %>%
ggplot() +
geom_sf() +
theme_bw()
MOQ %>%
ggplot() + # Crea un objeto ggplot a partir del objeto mex_map
geom_sf()
MOQ %>%
ggplot() + # Crea un objeto ggplot a partir del objeto mex_map
addTiles()
opq(bbox = getbb("Armenia Colombia")) # Vamos a obtener la caja de coordenada que contiene el poligono de Armenia##
opq=(bbox = getbb("Armenia Colombia")) # Vamos a obtener la caja de coordenada que contiene el poligono de Armenia##
##################################Angela Segura Cod. 201619956   R version 4.1.3 ############################################
##Taller Pset_3####
###Crear directorio de trabajo##
dir.create("code") #Creamos carpeta llamada code, donde guardaremos el script
dir.create("output") #Creamos la carpeta output para los datos procesados
list.files() ## Revisamos con que carpetas estamos trabajando#
##El script lo guardamos manualmente en la carpeta de code con el nombre Scriptrespuesta##
###Instalar librerias##
require(pacman)
install.packages("tm") #Tm y wordcloud se descargan para crear la nube de palabras
install.packages("wordcloud")
p_load(tidyverse, rio,skimr,tmaptools, sf, leaflet, rvest, xml2, osmdata, ggsn, tm,wordcloud,dplyr) # Llamamos las librerias  necesarias para el taller##
#########################################1.Regresiones#######################################################
####################################################2. Datos espaciales######################################################
## 2.1  Descargar los datos##
available_features() %>% head(100)
available_tags("amenity") %>% head(20)
opq=(bbox = getbb("Armenia Colombia")) # Vamos a obtener la caja de coordenada que contiene el poligono de Armenia##
osm = opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key="amenity" , value="restaurant") #En internet encontramos cÃ³mo encontrar los datos de los restaurantes en openstreetmap. (https://wiki.openstreetmap.org/wiki/Tag:amenity%3Drestaurant)
class(osm)
## 2.1  Descargar los datos##
available_features() %>% head(100)
available_tags("amenity") %>% head(20)
opq=(bbox = getbb("Armenia Colombia")) # Vamos a obtener la caja de coordenada que contiene el poligono de Armenia##
## Datos de los restaurantes en Armenia
osm = opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key="amenity" , value="restaurant") #En internet encontramos cÃ³mo encontrar los datos de los restaurantes en openstreetmap. (https://wiki.openstreetmap.org/wiki/Tag:amenity%3Drestaurant)
class(osm)
osm_sf = osm %>% osmdata_sf() ## extraer Simple Features Collection
osm_sf
restaurant = osm_sf$osm_points %>% select(osm_id,amenity)#Obtenemos el objeto
## Parques de Armenia
parques <- opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key = "leisure", value = "park") %>%
osmdata_sf() %>% .$osm_polygons %>% select(osm_id,name)
## 2.2 Visualizar  los datos##
#restaurantes
leaflet() %>% addTiles() %>% addCircles(data=restaurant , col="red")
leaflet()%>% addTiles() %>% addPolygons(data=opq , col="red")
leaflet()%>% addTiles() %>% addPolygons(data=osm, col="red")
leaflet() %>% addTiles() %>% addPolygons(data=parques, col="blue")
MOQ <- geocode_OSM("Museo del Oro Quimbaya, Armenia", as.sf=T)
leaflet() %>% addTiles() %>% addCircleMarkers(data=MOQ , col="yellow")
G1 %>%
ggplot() + # Crea un objeto ggplot a partir del objeto mex_map
geom_sf(data=parques, fill="white")
G1 <-
ggplot() + # Crea un objeto ggplot a partir del objeto mex_map
geom_sf(data=parques, fill="white")
## 2.2 Visualizar  los datos##
#restaurantes
g1<-leaflet() %>% addTiles() %>% addCircles(data=restaurant , col="red")
#parques
g2<-leaflet() %>% addTiles() %>% addPolygons(data=parques, col="blue")
#2.3 Geocodificar direcciones##
#Museo del oro Qumbaya
MOQ <- geocode_OSM("Museo del Oro Quimbaya, Armenia", as.sf=T)
#Pintar el punto del museo del Oro Quimbaya
g3<-leaflet() %>% addTiles() %>% addCircleMarkers(data=MOQ , col="yellow")
View(g2)
gg_inset<-ggdraw()
draw_plot(g1)+(g2)+(g3)
ggsave(plot=gg_inset, fillname="./mapa")
g3<-leaflet() %>% addTiles() %>% addCircleMarkers(data=MOQ , col="yellow")
g3
g2
g1
gg_inset<-ggdraw()
draw_plot(g1)+(g2)+(g3)
ggsave(plot=gg_inset, fillname="./mapa")
gg_inset <- ggdraw() +
draw_plot(g2) +
draw_plot(g1, x = 0.72, y = 0.76, width = 0.28, height = 0.19) +
draw_plot(g3, x = 0.03, y = 0.77, width = 0.25, height = 0.17)
require(pacman)
pacman::p_load(raster, rgdal, rgeos, stringr, sf, tidyverse, RColorBrewer, cowplot, ggpubr,
ggspatial, rnaturalearth, rnaturalearthdata)
gg_inset <- ggdraw() +
draw_plot(g2) +
draw_plot(g1, x = 0.72, y = 0.76, width = 0.28, height = 0.19) +
draw_plot(g3, x = 0.03, y = 0.77, width = 0.25, height = 0.17)
ggsave(plot = gg_inset,
filename = './myMap_inset.png', units = 'in', width = 8, height = 10, dpi = 300)
gg_inset
gg_inset <- ggdraw() +
draw_plot(g2) +
draw_plot(g1) +
draw_plot(g3)
data_regresiones<-import(file ="input/data_regresiones.rds" )
summary(data_regresiones)
View(data_regresiones)
m1_price<-lm(price~dist_park+luces_2021+rooms+bathrooms, data=data_regresiones)
summary(m1_price)
View(data_regresiones)
View(data_regresiones)
m2_price<-lm(price~dist_park+dist_cbd +rooms+bathrooms, data=data_regresiones)
summary(m2_price)
m3_price<-lm(price~dist_park+surfice_total +rooms+bathrooms, data=data_regresiones)
#Modelo 3
m3_price<-lm(price~dist_park+surface_total +rooms+bathrooms, data=data_regresiones)
summary(m3_price)
m1_price<-lm(price~dist_park+surface_total+luces_2021+rooms+bathrooms, data=data_regresiones)
summary(m1_price)
m2_price<-lm(price~dist_park+surface_total+dist_cbd +rooms+bathrooms, data=data_regresiones)
summary(m2_price)
m3_price<-lm(price~dist_park+surface_total +rooms+bathrooms, data=data_regresiones)
summary(m3_price)
m3_price<-lm(price~dist_park+surface_total +rooms+bathrooms+dist_cole, data=data_regresiones)
summary(m3_price)
roo
R.version.string
View(m1_price)
m1_price[["coefficients"]]
View(m1_price[["model"]])
m1_price[["coefficients"]]
m1_price[["effects"]]
m1_price[["fitted.values"]]
View(m1_price[["model"]])
m1_price
m1_price[["coefficients"]]
m1_price
Coeficiente_m1 <- m1_price[["coefficients"]]
coeficientes_modelos = bind_rows(m1_price,m2_price,m3_price, .id = "coefficients")
coeficientes_modelos = bind_rows(m1_price,m2_price,m3_price, .id = "coefficients")
## get Bogota-UPZ
bog <- opq(bbox = getbb("Bogota Colombia")) %>%
add_osm_feature(key="boundary", value="administrative") %>%
osmdata_sf()
bog <- bog$osm_multipolygons %>% subset(admin_level==9)
bog <- import("output/bog_upz.rds")
ggplot() + geom_sf(data=bog)
bog$normal <- rnorm(nrow(bog),100,10)
ggplot() + geom_sf(data=bog , aes(fill=normal))
map <- ggplot() + geom_sf(data=bog , aes(fill=normal)) +
scale_fill_viridis(option = "A" , name = "Variable")
map
map <- map +
scalebar(data = bog , dist = 5 , transform = T , dist_unit = "km") +
north(data = bog , location = "topleft")
map
map <- map + theme_linedraw() + labs(x="" , y="")
map
osm_layer <- get_stamenmap(bbox = as.vector(st_bbox(bog)),
maptype="toner", source="osm", zoom=13)
map2 <- ggmap(osm_layer) +
geom_sf(data=bog , aes(fill=normal) , alpha=0.3 , inherit.aes=F) +
scale_fill_viridis(option = "D" , name = "Variable") +
scalebar(data = bog , dist = 5 , transform = T , dist_unit = "km") +
north(data = bog , location = "topleft") + theme_linedraw() + labs(x="" , y="")
map2
## get Armenia Mapa
armenia <- opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key="boundary", value="administrative") %>%
osmdata_sf()
armenia <- arm$osm_multipolygons %>% subset(admin_level==9)
armenia <- import("output/armenia_mp.rds")
armenia <- export("output/armenia_mp.rds")
armenia <- opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key="boundary", value="administrative") %>%
osmdata_sf()
armenia <- arm$osm_multipolygons %>% subset(admin_level==9)
## get Armenia Mapa
armenia <- opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key="boundary", value="administrative") %>%
osmdata_sf()
armenia <- armenia$osm_multipolygons %>% subset(admin_level==9)
armenia <- import("output/armenia_mp.rds")
ggplot() + geom_sf(data=armenia)
armenia <- opq(bbox = getbb("Armenia Colombia")) %>%
available_features() %>% head(100)
available_tags("amenity") %>% head(20)
opq(bbox = getbb("Armenia Colombia"))
osm = opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key="amenity" , value="restaurant") #En internet encontramos cÃ³mo encontrar los datos de los restaurantes en openstreetmap. (https://wiki.openstreetmap.org/wiki/Tag:amenity%3Drestaurant)
class(osm)
osm_sf = osm %>% osmdata_sf() ## extraer Simple Features Collection
osm_sf
restaurant = osm_sf$osm_points %>% select(osm_id,amenity)#Obtenemos el objeto
## Parques de Armenia
parques <- opq(bbox = getbb("Armenia Colombia")) %>%
add_osm_feature(key = "leisure", value = "park") %>%
osmdata_sf() %>% .$osm_polygons %>% select(osm_id,name)
##################################Angela Segura Cod. 201619956   R version 4.1.3 ############################################
##Taller Pset_3####
R.version.string #Visualizar la version de R
###Crear directorio de trabajo##
dir.create("code") #Creamos carpeta llamada code, donde guardaremos el script
dir.create("output") #Creamos la carpeta output para los datos procesados
list.files() ## Revisamos con que carpetas estamos trabajando#
##El script lo guardamos manualmente en la carpeta de code con el nombre Scriptrespuesta##
###Instalar librerias##
require(pacman)
install.packages("tm") #Tm y wordcloud se descargan para crear la nube de palabras
install.packages("wordcloud")
p_load(tidyverse, rio,skimr,tmaptools, sf, leaflet, rvest, xml2, osmdata, ggsn, tm,wordcloud,dplyr) # Llamamos las librerias  necesarias para el taller##
#########################################1.Regresiones#######################################################
#1.1 Estimaciones#
data_regresiones<-import(file ="input/data_regresiones.rds" )#Importo la base de datos data_regresiones
summary(data_regresiones)
#Modelo 1
m1_price<-lm(price~dist_park+surface_total+luces_2021+rooms+bathrooms, data=data_regresiones)#Regresion 1 por la cual quiero determinar el precio
summary(m1_price)#Ver resultado de la regresion
#Modelo 2
m2_price<-lm(price~dist_park+surface_total+dist_cbd +rooms+bathrooms, data=data_regresiones)#Regresion 2 por la cual quiero determinar el precio
summary(m2_price)#Ver resultado de la regresion
#Modelo 3
m3_price<-lm(price~dist_park+surface_total +rooms+bathrooms+dist_cole, data=data_regresiones)#Regresion 3 por la cual quiero determinar el precio
summary(m3_price)#Ver resultado de la regresion
#1.2 Presentar resultados#
coeficientes_modelos = bind_rows(m1_price,m2_price,m3_price, .id = "coefficients")
data
